<?php
/**
 * Hyvä Themes - https://hyva.io
 * Copyright © Hyvä Themes 2020-present. All rights reserved.
 * This product is licensed per Magento install
 * See https://hyva.io/license
 */

declare(strict_types=1);

use Hyva\Theme\Model\ViewModelRegistry;
use Hyva\Theme\ViewModel\ProductPage;
use Hyva\Theme\ViewModel\ProductPrice;
use Magento\Catalog\Block\Product\AbstractProduct;
use Magento\Catalog\Model\Product;
use Magento\Catalog\Pricing\Price\FinalPrice;
use Magento\Catalog\Pricing\Price\RegularPrice;
use Magento\Catalog\Pricing\Price\TierPrice;
use Magento\Framework\Escaper;

/** @var AbstractProduct $block */
/** @var Escaper $escaper */
/** @var ViewModelRegistry $viewModels */
/** @var Product $product */
$product = $block->getProduct();

/** @var ProductPrice $productPriceViewModel */
$productPriceViewModel = $viewModels->require(ProductPrice::class);

/** @var ProductPage $productViewModel */
$productViewModel = $viewModels->require(ProductPage::class);

$regularPrice = $productPriceViewModel->getPriceValue(RegularPrice::PRICE_CODE, $product);
$finalPrice = $productPriceViewModel->getPriceValue(FinalPrice::PRICE_CODE, $product);
$tierPrices = $productPriceViewModel->getTierPrices(TierPrice::PRICE_CODE, $product);

$save_msrp_price = $regularPrice - $finalPrice;
$percentage_discount = round((float)number_format(($save_msrp_price*100)/$regularPrice, 2, ".", ""));

$flooringCalculationBlock = $block->getLayout()->createBlock(\Dcw\FlooringCalculation\Block\Index::class);
$flooringCalculationHelper = $flooringCalculationBlock->flooringCalculationHelper();

$tiles_size_attribute_id =  $flooringCalculationBlock->attributeResourceModel()
->getIdByCode('catalog_product', 'product_option'); // pass attribute id here

if ($productPriceViewModel->displayPriceInclAndExclTax()) {
    $regularPriceExclTax = $productPriceViewModel->getPriceValueExclTax(RegularPrice::PRICE_CODE, $product);
    $finalPriceExclTax = $productPriceViewModel->getPriceValueExclTax(FinalPrice::PRICE_CODE, $product);
}

$displayTax = $productPriceViewModel->displayPriceIncludingTax();

if (!empty($product->getExactWidth())) {
    $exact_width_ft = (float)$product->getExactWidth()/12;
    $exact_width_ft = round($exact_width_ft, 2);
} else {
    $exact_width_ft = 0;
}
if (!empty($product->getExactLength())) {
    $exact_length_ft = (float)$product->getExactLength()/12;
    $exact_length_ft = round($exact_length_ft, 2);
} else {
    $exact_length_ft = 0;
}
$sqft_per_tile = $exact_width_ft * $exact_length_ft;
$sqft_per_tile = round($sqft_per_tile, 2);

if ($product->getAttributeText('product_floor_type') == 'Tier Pricing') {
    if (!empty($product->getMinTileQuantity())) {
        $min_tile_quantity = $product->getMinTileQuantity();
    } else {
        $min_tile_quantity = 1;
    }
}

?>
<script>
function initPrice<?= (int)$product->getId() ?>() {

    <?php /* All four of these keys are used - they are rendered by PHP */ ?>
    const regularPriceInclTaxKey = 'oldPrice',
          regularPriceExclTaxKey = 'baseOldPrice',
          finalPriceInclTaxKey = 'finalPrice',
          finalPriceExclTaxKey = 'basePrice';

    function calculateCustomOptionPrices(activeCustomOptions, customOptionPrices) {
        return activeCustomOptions.reduce((priceAccumulator, activeCustomOptionId) => {
            const customOptionPrice = customOptionPrices[activeCustomOptionId];
            if (customOptionPrice) {
                return Number.parseFloat(priceAccumulator) + Number.parseFloat(customOptionPrice);
            }
            return priceAccumulator;
        }, 0);
    }

    return {
        regularPriceKey: <?= $displayTax ? 'regularPriceInclTaxKey' : 'regularPriceExclTaxKey' ?>,
        finalPriceKey: <?= $displayTax ? 'finalPriceInclTaxKey' : 'finalPriceExclTaxKey' ?>,
        activeProductsPriceData: false,
        initialFinalPrice: <?= (float)$finalPrice ?>,
        calculatedFinalPrice: false,
        calculatedFinalPriceWithCustomOptions: false,
        initialTierPrices: <?= /** @noEscape */ json_encode($tierPrices) ?>,
        showRegularPriceLabel: <?= ($finalPrice < $regularPrice) ? 'true' : 'false' ?>,
        customOptionPrices: [],
        <?php if ($productPriceViewModel->displayPriceInclAndExclTax()): ?>
        initialBasePrice: <?= (float)$finalPriceExclTax ?>,
        calculatedBasePrice: false,
        customOptionBasePrices: [],
        calculatedBasePriceWithCustomOptions: false,
        <?php endif; ?>
        activeCustomOptions: [],
        qty: 1,
        <?php if ($product->getAttributeText('product_floor_type') == 'Tier Pricing'):?>
        min_tile_quantity:'<?= /* @noEscape */ $min_tile_quantity?>',
        <?php endif;?>
        getMibTileQty:'1',
        getSqftPerTile:'',
        getPercentageDiscount:'<?= /* @noEscape */ $percentage_discount ?>',
        getSaveMsrpPrice:'<?= /* @noEscape */ strip_tags($productViewModel->format($save_msrp_price))?>',
        pdp_shipping_text: '<?= /* @noEscape */ $product->getPdpShippingText()?>',
        expected_days_ship: '<?= /* @noEscape */ $flooringCalculationHelper
        ->getExpectedShipDate($product->getId());?>',
        updateCustomOptionActive(data) {
            let activeCustomOptions = this.activeCustomOptions;
            const customOptionId = data.customOptionId;

            if (data.active) {
                if (!activeCustomOptions.includes(customOptionId)) {
                    activeCustomOptions.push(data.customOptionId);
                }
            } else {
                if (customOptionId && activeCustomOptions.includes(customOptionId)) {
                    let index = activeCustomOptions.indexOf(customOptionId);
                    activeCustomOptions.splice(index, 1);
                }
            }
            this.calculateFinalPriceWithCustomOptions()
        },
        updateCustomOptionPrices(prices, basePrices) {
            if (prices) {
                this.customOptionPrices = prices;
            }

            <?php if ($productPriceViewModel->displayPriceInclAndExclTax()): ?>
            if (basePrices) {
                this.customOptionBasePrices = basePrices;
            }
            <?php endif; ?>

            this.calculateFinalPriceWithCustomOptions();
        },
        calculateFinalPrice() {
            const findApplicableTierPrice = (initialPrice, withTax) => {
                if (this.activeProductsPriceData && this.activeProductsPriceData.tierPrices) {
                    const key = withTax ? 'price' : 'basePrice'
                    return this.activeProductsPriceData.tierPrices.reduce((acc, tierPrice) => {
                        if (this.qty >= tierPrice.qty && tierPrice[key] < acc) {
                            return tierPrice[key];
                        }
                        return acc;
                    }, this.activeProductsPriceData[withTax ? finalPriceInclTaxKey : finalPriceExclTaxKey].amount);

                } else {
                    const key = withTax ? 'price_incl_tax' : 'price_excl_tax';
                    return Object.values(this.initialTierPrices).reduce((acc, tierPrice) => {
                        if (this.qty >= tierPrice.price_qty && tierPrice[key] < acc) {
                            return tierPrice[key];
                        }
                        return acc;
                    }, initialPrice);

                }
            }

            this.calculatedFinalPrice = findApplicableTierPrice(
                                        this.initialFinalPrice, <?= $displayTax ? 'true' : 'false' ?>
                                        );
            window.dispatchEvent(new CustomEvent("update-product-final-price", {detail: this.calculatedFinalPrice}));

            <?php if ($productPriceViewModel->displayPriceInclAndExclTax()): ?>
            this.calculatedBasePrice = findApplicableTierPrice(<?= (float) $finalPriceExclTax ?>, false);
            window.dispatchEvent(new CustomEvent("update-product-base-price",
                                    {detail: {basePrice: this.calculatedBasePrice}})
                                );
            <?php endif; ?>
            
            
        },
        calculatePriceLabelVisibility() {
            this.showRegularPriceLabel =
                (this.calculatedFinalPrice === this.activeProductsPriceData[this.regularPriceKey].amount) &&
                this.activeProductsPriceData.isMinimalPrice;
        },
        calculateFinalPriceWithCustomOptions() {
            const finalPrice = this.calculatedFinalPrice || this.initialFinalPrice;
            this.calculatedFinalPriceWithCustomOptions = finalPrice + this.getCustomOptionPrice();
            <?php if ($productPriceViewModel->displayPriceInclAndExclTax()): ?>
            const basePrice = this.calculatedBasePrice || this.initialBasePrice;
            this.calculatedBasePriceWithCustomOptions = basePrice + this.getCustomOptionBasePrice();
            <?php endif; ?>
        },
        getCustomOptionPrice() {
            return calculateCustomOptionPrices(this.activeCustomOptions, this.customOptionPrices);
        },
        <?php if ($productPriceViewModel->displayPriceInclAndExclTax()): ?>
        getCustomOptionBasePrice() {
            return calculateCustomOptionPrices(this.activeCustomOptions, this.customOptionBasePrices);
        },
        <?php endif; ?>
        getFinalPrice() {
            var final_price = this.calculatedFinalPriceWithCustomOptions ||
            this.calculatedFinalPrice || this.initialFinalPrice;
            this.final_price = final_price;
            return (final_price);
        },
        getFormattedFinalPrice() {
            return hyva.formatPrice(this.getFinalPrice())
        },
        getFinalPricePerTile() {
            var final_price_per_tile = parseFloat(this.getSqftPerTile)*parseFloat(this.getFinalPrice());
            return hyva.formatPrice(final_price_per_tile);
        },
        getRegularPrice() {
            var regular_price = '<?= /* @noEscape */ $regularPrice?>';
            if (this.activeProductsPriceData){
               regular_price =   this.activeProductsPriceData[this.regularPriceKey].amount;
               this.regular_price = regular_price;
            }
            return regular_price;
        },
        getFormattedRegularPrice() {
            return hyva.formatPrice(this.getRegularPrice())
        },
        getRegularPricePerTile() {
            var regular_price_per_tile = parseFloat(this.getSqftPerTile)*parseFloat(this.getRegularPrice());
            return hyva.formatPrice(regular_price_per_tile);
        },
        getSaveMsrpPrice() {
            var save_msrp_price = parseFloat(this.getRegularPrice()) - parseFloat(this.getFinalPrice());
            return save_msrp_price;
        },
        getFormattedSaveMsrpPrice() {
            return hyva.formatPrice(this.getSaveMsrpPrice());
        },
        getPercentageDiscount() {
            var percentage_discount = Math.round(
                                                 (parseFloat(this.getSaveMsrpPrice()*100)/
                                                  parseFloat(this.getRegularPrice())).toFixed(2)
                                                 );
            return percentage_discount;
        },
        <?php if ($productPriceViewModel->displayPriceInclAndExclTax()): ?>
        getFormattedBasePrice() {
            return hyva.formatPrice(
                this.calculatedBasePriceWithCustomOptions ||
                this.calculatedBasePrice ||
                this.initialBasePrice
            )
        },
        <?php endif; ?>
        isPriceHidden() {
            const finalPrice = this.calculatedFinalPriceWithCustomOptions ||
                this.calculatedFinalPrice ||
                this.initialFinalPrice;
            return <?= $product->isSaleable() ? 'false' : 'true' ?> && finalPrice === 0;
        },
        updateConfigurableChanged(data){
            //--- on color/size click price change in size box   START------------------
            //alert(this.optionConfig.attributes[data.optionId]['code']);
            if (this.optionConfig.attributes[data.optionId]['code'] != 'product_option' &&
                this.optionConfig.attributes[<?= /* @noEscape */ $tiles_size_attribute_id?>]) {
                var attributes_options = this.optionConfig.attributes[data.optionId]['options'];
                //console.log(JSON.stringify(attributes_options));
                attributes_options.forEach(function(option_details) {
                    if(option_details['id'] == data.value){
                        option_details['products'].forEach(function(child_product_id) {
                            var tiles_size_attr_value =
                            initConfigurableSwatchOptions_<?= /* @noEscape */ (int)$product->getId() ?>().optionConfig.
                            index[child_product_id][<?= /* @noEscape */ $tiles_size_attribute_id?>];
                            
                            var finalPrice_amount =
                            initConfigurableSwatchOptions_<?= /* @noEscape */ (int)$product->getId() ?>().optionConfig.
                            optionPrices[child_product_id]['finalPrice']['amount'];
                            <?php if ($product->getAttributeText('product_floor_type') == 'Tier Pricing'):?>
                            var get_min_tile_quantity =
                            initConfigurableSwatchOptions_<?= /* @noEscape */ (int)$product->getId() ?>().optionConfig.
                            min_tile_quantity[child_product_id];
                            
                            get_min_tile_quantity =
                            (get_min_tile_quantity)?get_min_tile_quantity:'<?= /* @noEscape */ $min_tile_quantity?>';
                            <?php endif;?>
                            var get_exact_width =
                            initConfigurableSwatchOptions_<?= /* @noEscape */ (int)$product->getId() ?>().
                            optionConfig.exact_width[child_product_id];
                            var get_exact_width_ft = initPrice<?= /* @noEscape */ (int)$product->getId() ?>().
                            getExactFt(get_exact_width,'<?= /* @noEscape */ $exact_width_ft?>');

                            var get_exact_length =
                            initConfigurableSwatchOptions_<?= /* @noEscape */ (int)$product->getId() ?>().
                            optionConfig.exact_length[child_product_id];
                            var get_exact_length_ft = initPrice<?= /* @noEscape */ (int)$product->getId() ?>().
                            getExactFt(get_exact_length,'<?= /* @noEscape */ $exact_length_ft?>');
                                
                            var get_sqft_per_tile = parseFloat(get_exact_width_ft) * parseFloat(get_exact_length_ft);
                            get_sqft_per_tile = Math.round(parseFloat(get_sqft_per_tile) * 100) / 100;

                            
                            var CONTROL_INTERVAL = setInterval(function(){
                            if(document.getElementById(
                            "swatch-tiles-size-price-pertile-<?= /* @noEscape */ $tiles_size_attribute_id?>-"+
                            tiles_size_attr_value)){
                                if (get_sqft_per_tile > 0 && get_sqft_per_tile !="") {
                                    document.getElementById(
                                    "swatch-label-box-<?= /* @noEscape */ $tiles_size_attribute_id?>-"
                                    +tiles_size_attr_value
                                    ).classList.remove("opacity-50");
                                    document.getElementById(
                                    "swatch-label-box-<?= /* @noEscape */ $tiles_size_attribute_id?>-"
                                    +tiles_size_attr_value
                                    ).classList.remove("select-none");

                                    document.getElementById(
                                    "swatch-tiles-size-price-<?= /* @noEscape */ $tiles_size_attribute_id?>-"
                                    +tiles_size_attr_value
                                    ).innerHTML =
                                    '('+hyva.formatPrice(finalPrice_amount)+'/sqft)';
                                    document.getElementById(
                                    "swatch-tiles-size-price-pertile-<?= /* @noEscape */ $tiles_size_attribute_id?>-"
                                    +tiles_size_attr_value
                                    ).innerHTML =
                                    hyva.formatPrice(parseFloat(get_sqft_per_tile)*parseFloat(finalPrice_amount));  
                                } else {
                                    /* ----------- tiles size box inactive & price hide START ------------ */
                                    document.getElementById(
                                    "swatch-label-box-<?= /* @noEscape */ $tiles_size_attribute_id?>-"
                                    +tiles_size_attr_value
                                    ).classList.add("opacity-50");
                                    document.getElementById(
                                    "swatch-label-box-<?= /* @noEscape */ $tiles_size_attribute_id?>-"
                                    +tiles_size_attr_value
                                    ).classList.add("select-none");

                                    document.getElementById(
                                    "swatch-tiles-size-price-<?= /* @noEscape */ $tiles_size_attribute_id?>-"
                                    +tiles_size_attr_value
                                    ).innerHTML = '';
                                    document.getElementById(
                                    "swatch-tiles-size-price-pertile-<?= /* @noEscape */ $tiles_size_attribute_id?>-"
                                    +tiles_size_attr_value
                                    ).innerHTML = '';
                                    /* ----------- tiles size box inactive & price hide END ------------ */
                                }
                                clearInterval(CONTROL_INTERVAL);
                            }
                            }, 100);
                        });
                    }
                });
            }
            //--- on color/size click price change in size box   END------------------
        },
        getExactFt(child_exact_size, parent_exact_size) {

            if(child_exact_size){
                var exact_size_ft = parseFloat(child_exact_size)/12;
                exact_size_ft = Math.round(parseFloat(exact_size_ft) * 100) / 100;
            }else{
                var exact_size_ft = parent_exact_size;
            }

            return exact_size_ft;
        },
        eventListeners: {
            
            ['@update-tile-size-area-<?= (int)$product->getId() ?>.window'](event) {
                this.tile_size_area_text = event.detail.tile_size_area_text;

                this.exact_width = (event.detail.exact_width)?event.detail.exact_width:
                '<?= /* @noEscape */ $product->getExactWidth()?>';

                var get_exact_width_ft = 
                this.getExactFt(event.detail.exact_width,'<?= /* @noEscape */ $exact_width_ft?>');

                this.exact_length = (event.detail.exact_length)?event.detail.exact_length:
                '<?= /* @noEscape */ $product->getExactLength()?>';
                
                var get_exact_length_ft = 
                this.getExactFt(event.detail.exact_length,'<?= /* @noEscape */ $exact_length_ft?>');

                var get_sqft_per_tile =  parseFloat(get_exact_width_ft) * parseFloat(get_exact_length_ft);
                get_sqft_per_tile = Math.round(parseFloat(get_sqft_per_tile) * 100) / 100;
                this.getSqftPerTile = get_sqft_per_tile;
                this.sqft_per_tile = this.getSqftPerTile;
            },
            ['@update-shipping-details-<?= (int)$product->getId() ?>.window'](event) {
                this.pdp_shipping_text = (event.detail.pdp_shipping_text)?event.detail.pdp_shipping_text:
                '<?= /* @noEscape */ $product->getPdpShippingText()?>';
                this.expected_days_ship = (event.detail.expected_days_ship)?event.detail.expected_days_ship:
                '<?= /* @noEscape */ $flooringCalculationHelper
                ->getExpectedShipDate($product->getId());?>';
            },
            <?php if ($product->getAttributeText('product_floor_type') == 'Tier Pricing'):?>
            ['@update-min-tile-quantity-<?= (int)$product->getId() ?>.window'](event) {
                this.min_tile_quantity = parseFloat(
                                            (event.detail)?event.detail:'<?= /* @noEscape */ $min_tile_quantity?>'
                                         );
                 this.getMibTileQty= this.min_tile_quantity;
                                     
            },
        <?php endif;?>

            ['@update-prices-<?= (int)$product->getId() ?>.window'](event) {
                this.activeProductsPriceData = event.detail;

                this.calculateFinalPrice();
                this.calculateFinalPriceWithCustomOptions();
                this.calculatePriceLabelVisibility();

            /* --- add to cart button enabled / disabled based on exact_width & exact_length checking START --- */
            if(this.sqft_per_tile > 0 && this.sqft_per_tile !=""){
                document.querySelector('#product-addtocart-button-fake').disabled = false;
            }else{
                document.querySelector('#product-addtocart-button-fake').disabled = true;
            }
            /* --- add to cart button enabled / disabled based on exact_width & exact_length checking END ----- */
                
                //--- on color/size click total info change    START------------------
            if ( this.square_footage > 0 && this.square_footage != '') {
                var total_square_footage = parseFloat(this.square_footage);
                if(this.is_check_overage_percent){
                    var extra_square_footage_overage = (parseFloat(total_square_footage)*
                                                parseFloat(this.overage_percent))/100;

                    total_square_footage = parseFloat(total_square_footage) +
                                        parseFloat(extra_square_footage_overage);
                }
                qty_calc = parseFloat(total_square_footage)/parseFloat(this.sqft_per_tile);
                qty_calc = Math.ceil(qty_calc);
                this.total_qty = qty_calc;
                this.total_qty_tile = qty_calc;
            }
            if ((this.length > 0 && this.length != '') && (this.width > 0 && this.width != '')) {
                var total_square_footage =  parseFloat(this.length) * parseFloat(this.width);
                if(this.is_check_overage_percent){
                    var extra_square_footage_overage = (parseFloat(total_square_footage)*
                                                parseFloat(this.overage_percent))/100;

                    total_square_footage = parseFloat(total_square_footage) +
                                        parseFloat(extra_square_footage_overage);
                }
                qty_calc = parseFloat(total_square_footage)/parseFloat(this.sqft_per_tile);
                qty_calc = Math.ceil(qty_calc);
                this.total_qty = qty_calc;
                this.total_qty_tile = qty_calc;
            }

            <?php if ($product->getAttributeText('product_floor_type') == 'Tier Pricing'):?>
                            
                if(this.total_qty<this.min_tile_quantity){
                        this.total_qty=this.min_tile_quantity;
                        this.total_qty_tile=this.min_tile_quantity;
                }
                document.getElementById('min_tile_quantity').value=this.min_tile_quantity;
            <?php endif;?>

            this.total_coverage_sqft = (parseFloat(this.getSqftPerTile) * parseFloat(this.total_qty_tile)).toFixed(2);
            this.total_price = hyva.formatPrice(
                                                parseFloat(this.total_qty_tile) *
                                                (parseFloat(this.getFinalPrice())*
                                                 parseFloat(this.getSqftPerTile)).toFixed(2)
                                                );
            this.total_regular_price = hyva.formatPrice(
                                                        parseFloat(this.total_qty_tile) *
                                                        (parseFloat(this.getRegularPrice())*
                                                         parseFloat(this.getSqftPerTile)).toFixed(2)
                                                        );
                            
                           
            //--- on color/size click total info change    END------------------
            
            this.showPriceSummary = 1; // show Price Summary
            },
            ['@update-qty-<?= (int)$product->getId() ?>.window'](event) {
                this.qty = event.detail;console.log(event.detail);
                this.calculateFinalPrice();
                this.calculateFinalPriceWithCustomOptions();
            },
            ['@update-custom-option-active.window'](event) {
                this.updateCustomOptionActive(event.detail);
            },
            ['@update-custom-option-prices.window'](event) {
                this.updateCustomOptionPrices(event.detail);
            },
            ['@configurable-selection-changed.window'](event) {
                this.updateConfigurableChanged(event.detail);
            },
            
            <?php if ($productPriceViewModel->displayPriceInclAndExclTax()): ?>
            ['@update-custom-option-base-prices.window'](event) {
                this.updateCustomOptionPrices(null, event.detail);
            }
            <?php endif; ?>
        }
    }
}
</script>
<div x-data="initPrice<?= (int)$product->getId() ?>()"
     x-bind="eventListeners"
     class="price-box price-final_price price__box mb-2"
>
    <div class="sale_price_info w-1/2 bg-transparent py-2 pl-5 pr-5">
        <template x-if="!activeProductsPriceData && !isPriceHidden()">
            <h3 class="text-size14 font-medium text-darkblack mb-1">Starting At</h3>
        </template>
        <template x-if="activeProductsPriceData">
            <h3 class="text-size14 font-medium text-darkblack mb-1">Our Sale Price</h3>
        </template>
        <template x-if="!activeProductsPriceData && !isPriceHidden()">
            <div class="price-container flex items-baseline">
                <div class="final-price inline-block" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer">
                        <?php /*<span class="price-label block">
                            <?= ($product->canConfigure() && is_int($product->getPrice())) ?
                                $escaper->escapeHtml(__('As low as')) . ':' :
                                '&nbsp;' ?>
                        </span> */?>
                    <span id="product-price-<?= (int)$product->getId() ?>"
                          class="price-wrapper">
                        <span class="price inter text-size21 font-bold text-darkblack"
                              x-html="getFormattedFinalPrice()">
                            <?= /** @noEscape */ $productViewModel->format($finalPrice) ?>
                        </span> <span class="price-label inter text-size14 font-normal text-darkblack mr-2">/sqft</span>
                    </span>
                    <meta itemprop="price" content="<?= $escaper->escapeHtmlAttr($finalPrice) ?>">
                    <meta itemprop="priceCurrency"
                          content="<?= $escaper->escapeHtmlAttr($productViewModel->getCurrencyData()['code']) ?>">
                </div>
                <?php if ($productPriceViewModel->displayPriceInclAndExclTax()): ?>
                    <div class="final-price-excl-tax">
                        <span>
                            <span><?= $escaper->escapeHtml(__('Excl. Tax')) ?>:</span>
                            <span class="price inter text-size21 font-bold text-darkblack"
                                  x-html="getFormattedBasePrice()">
                                <?= /** @noEscape */ $productViewModel->format($finalPriceExclTax) ?>
                            </span>
                        </span>
                    </div>
                <?php endif; ?>
                <?php if ($finalPrice < $regularPrice): ?>
                    <div class="old-price mr-2 flex">
                        <span id="product-price-<?= (int)$product->getId() ?>"
                              class="price-wrapper">
                            <span class="price line-through inter text-size14 font-normal text-darkblack"
                                  x-html="hyva.formatPrice(<?= (float)$regularPrice ?> +
                                  getCustomOptionPrice())">
                                <?= /** @noEscape */ $productViewModel->format($regularPrice) ?>
                            </span>
                        </span>
                    </div>
                    <?php if ($productPriceViewModel->displayPriceInclAndExclTax()): ?>
                    <div class="old-price-excl-tax">
                        <span>
                            <span><?= $escaper->escapeHtml(__('Excl. Tax')) ?>:</span>
                            <span class="price line-through inter text-size14 font-normal text-darkblack"
                                x-html="hyva.formatPrice(<?= (float)$regularPriceExclTax ?> +
                                getCustomOptionBasePrice())">
                                <?= /** @noEscape */ $productViewModel->format($regularPriceExclTax) ?>
                            </span>
                        </span>
                    </div>
                    <?php endif; ?>
                <?php endif; ?>
            </div>
        </template>
        <template x-if="activeProductsPriceData">
            <div class="price-container flex items-baseline">
                <div class="final-price inline-block">
                    <?php /*if ($product->canConfigure() && is_int($product->getPrice())): ?>
                        <span class="price-label block" :class="{ 'invisible' : !showRegularPriceLabel }">
                            <?= $escaper->escapeHtml(__('As low as')) ?>:
                        </span>
                    <?php endif;*/ ?>
                    <span id="product-price-<?= (int)$product->getId() ?>"
                          class="price-wrapper">
                        <span class="price inter text-size21 font-bold text-darkblack"
                            x-html="getFormattedFinalPrice()"></span>
                        <span class="price-label inter text-size14 font-normal text-darkblack mr-2">
                            /sqft
                        </span>
                    </span>
                </div>
        
                <template x-if="activeProductsPriceData &&
                    activeProductsPriceData.oldPrice &&
                    activeProductsPriceData[finalPriceKey].amount < activeProductsPriceData[regularPriceKey].amount
                ">
                    <div class="old-price flex mr-2">
                        <span id="product-price-<?= (int)$product->getId() ?>"
                              class="price-wrapper title-font font-regular text-xl line-through text-gray-900">
                            <span class="price" x-html="hyva.formatPrice(activeProductsPriceData[regularPriceKey].amount
                            + getCustomOptionPrice())"></span>
                        </span>
                    </div>
                </template>
            </div>
        </template>
        <?php if ($productPriceViewModel->displayPriceInclAndExclTax()): ?>
        <template x-if="activeProductsPriceData &&
            activeProductsPriceData.oldPrice &&
            activeProductsPriceData[finalPriceKey].amount < activeProductsPriceData[regularPriceKey].amount
        ">
            <div class="old-price-excl-tax">
                <span><?= $escaper->escapeHtml(__('Excl. Tax')) ?>:</span>
                <span class="font-regular text-gray-900">
                    <span class="price" x-html="hyva.formatPrice(activeProductsPriceData['baseOldPrice'].amount +
                    getCustomOptionBasePrice())"></span>
                </span>
            </div>
        </template>
        <template x-if="activeProductsPriceData">
            <div class="price-excl-taxinline-block">
                <span><?= $escaper->escapeHtml(__('Excl. Tax')) ?>:</span>
                <span class="font-regular text-gray-900">
                    <span class="price" x-html="getFormattedBasePrice()"></span>
                </span>
            </div>
        </template>
        <?php endif; ?>
        <div class="price-tile-container" x-show="showPriceSummary == 1 && (sqft_per_tile > 0 && sqft_per_tile !='')">
            <div class="final_price_per_tile mt-4 inter text-size13 font-medium text-darkblack">
                <span x-text="getFinalPricePerTile()"></span>/tile
            </div>
            <div x-show="getPercentageDiscount() > 0" 
            class="regular_price_per_tile inter text-size13 font-medium text-darkblack">
                <span x-text="getRegularPricePerTile()"></span>
            </div>
        </div>
    </div>
    <?= /* @noEscape */ $block->getLayout()->createBlock(Magento\Catalog\Block\Product\View::class)
    ->setTemplate('Dcw_FlooringCalculation::product/view/price_ship_info_right.phtml')->toHtml();?>

</div>
