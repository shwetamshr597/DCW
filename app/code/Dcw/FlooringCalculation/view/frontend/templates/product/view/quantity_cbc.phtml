<?php
/**
 * Hyvä Themes - https://hyva.io
 * Copyright © Hyvä Themes 2020-present. All rights reserved.
 * This product is licensed per Magento install
 * See https://hyva.io/license
 */

declare(strict_types=1);

use Hyva\Theme\Model\ViewModelRegistry;
use Hyva\Theme\ViewModel\ProductStockItem;
use Magento\Catalog\Block\Product\View;
use Magento\Catalog\Model\Product;
use Magento\Framework\Escaper;

// phpcs:disable Generic.WhiteSpace.ScopeIndent.Incorrect

/** @var View $block */
/** @var Escaper $escaper */
/** @var ViewModelRegistry $viewModels */

/** @var Product $product */
$product = $block->getProduct();

/** @var ProductStockItem $stockItemViewModel */
$stockItemViewModel = $viewModels->require(ProductStockItem::class);
$minSalesQty        = $stockItemViewModel->getMinSaleQty($product);
$maxSalesQty        = $stockItemViewModel->getMaxSaleQty($product);

$maxSalesQtyLength  = ($maxSalesQty ? strlen((string) $maxSalesQty) : 4)
    + (/* add one if decimal for separator */
    (int) $stockItemViewModel->isQtyDecimal($product));

$step = $stockItemViewModel->getQtyIncrements($product)
    ? $stockItemViewModel->getQtyIncrements($product)
    : null;

$flooringCalculationBlock = $block->getLayout()->createBlock(\Dcw\FlooringCalculation\Block\Index::class);
$cbcTilesArr = $flooringCalculationBlock->getCbcTiles($product->getId());

$flooringCalculationHelper = $flooringCalculationBlock->flooringCalculationHelper();
?>
<?php if ($block->shouldRenderQuantity()): ?>
    <script>
    function flooringCalcDetails() {
        return {
            room_size_option_group:1,
            room_width:'',
            room_width_tiles_qty1:0,
            room_width_tiles_qty2:0,
            floor_width_display_ft_inch1:'',
            floor_length_display_ft_inch1:'',
            room_length:'',
            room_length_tiles_qty1:0,
            room_length_tiles_qty2:0,
            floor_width_display_ft_inch2:'',
            floor_length_display_ft_inch2:'',
            room_corner_tiles1:0,
            room_border_tiles1:0,
            room_center_tiles1:0,
            room_total_tiles_option1:0,
            room_corner_tiles2:0,
            room_border_tiles2:0,
            room_center_tiles2:0,
            room_total_tiles_option2:0,
            corner_tiles:0,
            border_tiles:0,
            center_tiles:0,
            exact_width:'',
            exact_length:'',
            final_price_per_tile: '',
            final_price: initPrice<?= /* @noEscape */ (int)$product->getId() ?>().getFinalPrice(),
            regular_price: initPrice<?= /* @noEscape */ (int)$product->getId() ?>().getRegularPrice(),
            is_check_overage_percent:<?= ($product->getOveragePercent())?'true':'false'?>,
            overage_percent: '<?= /* @noEscape */ $product->getOveragePercent()?>',
            total_qty: 1,
            total_qty_tile:1,
            total_coverage_sqft:'',
            total_price:'',
            total_regular_price:'',
            showPriceSummary: false,
            tile_size_area_text:'',
            rubberTilesTab:'shop_by_room_size',
            sqft_per_tile: initPrice<?= (int)$product->getId() ?>().getSqftPerTile,
            <?php if ($product->getAttributeText('product_floor_type') == 'Tier Pricing'):?>
            min_tile_quantity: initPrice<?= (int)$product->getId() ?>().getMibTileQty,
            <?php endif; ?>
            overagePercent:  function () {
                if ((this.room_width > 0 && this.room_width != '') && 
                (this.room_length > 0 && this.room_length != '') && 
                this.rubberTilesTab == 'shop_by_room_size') {
                    this.updateCbcTilesQty();
                }
            },
            roomWidthKeyup: function () {
                var regexp = /^\d*\.?\d*$/;     ///^\d+(\.\d{1,2})?$/;
                var isValidated = regexp.test(this.room_width);
                
                if (isValidated && this.room_width != '') {
                    var room_width_inch = parseFloat(this.room_width) * 12;
                    this.room_width_tiles_qty1 = parseInt(parseFloat(room_width_inch) /
                                                                parseFloat(this.exact_width));
                    this.floor_width_display_ft_inch1 = 
                    this.floorDisplayFtInch(this.exact_width, this.room_width_tiles_qty1);

                    this.room_width_tiles_qty2 = Math.ceil(parseFloat(room_width_inch) /
                                                                parseFloat(this.exact_width));

                    this.floor_width_display_ft_inch2 = 
                    this.floorDisplayFtInch(this.exact_width, this.room_width_tiles_qty2);

                    this.updateCbcTilesQty();

                } else {
                    this.room_width = '';
                    this.updateCbcTilesQty();
                }
            },
            roomLengthKeyup: function () {
                var regexp = /^\d*\.?\d*$/; 
                var isValidated = regexp.test(this.room_length);
                
                if (isValidated && this.room_length != '') {
                    var room_length_inch = parseFloat(this.room_length) * 12;
                    this.room_length_tiles_qty1 = parseInt(parseFloat(room_length_inch) /
                                                                parseFloat(this.exact_length));

                    this.floor_length_display_ft_inch1 = 
                    this.floorDisplayFtInch(this.exact_length, this.room_length_tiles_qty1);

                    this.room_length_tiles_qty2 = Math.ceil(parseFloat(room_length_inch) /
                                                                parseFloat(this.exact_length));

                    this.floor_length_display_ft_inch2 = 
                    this.floorDisplayFtInch(this.exact_length, this.room_length_tiles_qty2);

                    this.updateCbcTilesQty();

                } else {
                    this.room_length = '';
                    this.updateCbcTilesQty();
                    
                }
            },
            cornerTilesUpdate:  function () {
                var regexp = /^\d*\.?\d*$/;
                var isValidated = regexp.test(this.corner_tiles);
                if (isValidated && this.corner_tiles != '') {
                    this.corner_tiles = parseInt(this.corner_tiles);
                    this.calc_total_qty_sqft_price_func();
                } else {
                        this.corner_tiles = 0;
                }
            },
            borderTilesUpdate:  function () {
                var regexp = /^\d*\.?\d*$/;
                var isValidated = regexp.test(this.border_tiles);
                if (isValidated && this.border_tiles != '') {
                    this.border_tiles = parseInt(this.border_tiles);
                    this.calc_total_qty_sqft_price_func();
                } else {
                        this.border_tiles = 0;
                }
            },
            centerTilesUpdate:  function () {
                var regexp = /^\d*\.?\d*$/;
                var isValidated = regexp.test(this.center_tiles);
                if (isValidated && this.center_tiles != '') {
                    this.center_tiles = parseInt(this.center_tiles);
                    this.calc_total_qty_sqft_price_func();
                } else {
                        this.center_tiles = 0;
                }
            },
            floorDisplayFtInch: function (exact_size, room_tiles_qty) {
                var floor_size_inch = Math.ceil(parseFloat(exact_size) * parseInt(room_tiles_qty));
                var floor_size_ft = parseFloat(floor_size_inch) / 12;
                var floor_size_ft_one_decimal_ceil = Math.ceil(parseFloat(floor_size_ft) * 10) / 10;

                return this.decimalFeetToFeetInches(floor_size_ft_one_decimal_ceil);
            },
            updateCbcTilesQty: function () {
                if(this.room_width > 0 && this.room_length > 0){
                    this.room_total_tiles_option1 = this.room_width_tiles_qty1 * this.room_length_tiles_qty1;

                    if(this.is_check_overage_percent){
                        var extra_overage_tiles = (parseInt(this.room_total_tiles_option1) * 
                                                    parseFloat(this.overage_percent))/100;
                        extra_overage_tiles = Math.ceil(extra_overage_tiles);
                        this.room_total_tiles_option1 = parseInt(this.room_total_tiles_option1) + 
                                                        parseInt(extra_overage_tiles);
                    }

                    this.room_corner_tiles1 = 4;
                    this.room_border_tiles1 = parseInt((parseInt(this.room_width_tiles_qty1) - 2) + 
                                                (parseInt(this.room_length_tiles_qty1) - 2)) * 2;
                    this.room_center_tiles1 = parseInt(this.room_total_tiles_option1) - 
                                            (parseInt(this.room_corner_tiles1) + parseInt(this.room_border_tiles1));

                    this.room_total_tiles_option2 = this.room_width_tiles_qty2 * this.room_length_tiles_qty2;

                    if(this.is_check_overage_percent){
                        var extra_overage_tiles = (parseInt(this.room_total_tiles_option2) * 
                                                parseFloat(this.overage_percent))/100;
                        extra_overage_tiles = Math.ceil(extra_overage_tiles);
                        this.room_total_tiles_option2 = parseInt(this.room_total_tiles_option2) + 
                                                        parseInt(extra_overage_tiles);
                    }

                    this.room_corner_tiles2 = 4;
                    this.room_border_tiles2 = parseInt((parseInt(this.room_width_tiles_qty2) - 2) + 
                                            (parseInt(this.room_length_tiles_qty2) - 2)) * 2;
                    this.room_center_tiles2 = parseInt(this.room_total_tiles_option2) - 
                                            (parseInt(this.room_corner_tiles2) + parseInt(this.room_border_tiles2));

                    if (this.room_size_option_group == 1) {
                        this.corner_tiles = this.room_corner_tiles1;
                        this.border_tiles = this.room_border_tiles1;
                        this.center_tiles = this.room_center_tiles1;
                    }else{
                        this.corner_tiles = this.room_corner_tiles2;
                        this.border_tiles = this.room_border_tiles2;
                        this.center_tiles = this.room_center_tiles2;
                    }
                }else{
                    this.corner_tiles = 0;
                    this.border_tiles = 0;
                    this.center_tiles = 0;
                }
                this.calc_total_qty_sqft_price_func();
            },
            updateTotalQtySqftPriceOnPageLoad:  function () {
                <?php if (empty($flooringCalculationHelper->isCartConfigurePdp())) {?>
                    <?php  if(!isset($_REQUEST['color'])) { ?>
                var CONTROL_INTERVAL = setInterval(function(){
                    if(document.querySelector('.product-option-value-input')){
                        document.querySelectorAll('.product-option-values').forEach(function(option_box) {
                            option_box.querySelector('.product-option-value-input').click();
                        });
                        clearInterval(CONTROL_INTERVAL);
                    }
                }, 100);
                <?php }?>
                <?php }?>
            },
            calc_total_qty_sqft_price_func:   function () {
                this.total_qty =  parseInt(this.corner_tiles) + 
                                parseInt(this.border_tiles) + 
                                parseInt(this.center_tiles);

                this.total_qty_tile = this.total_qty;
                
                <?php if ($product->getAttributeText('product_floor_type') == 'Tier Pricing'):?>
                    this.min_tile_quantity=parseFloat(document.getElementById('min_tile_quantity').value); 
                    if(this.total_qty<this.min_tile_quantity){
                        this.total_qty=this.min_tile_quantity;
                        this.total_qty_tile=this.min_tile_quantity;
                    }
                <?php endif; ?>

                this.total_coverage_sqft = (parseFloat(this.sqft_per_tile) * 
                parseFloat(this.total_qty_tile)).toFixed(2);
                this.total_price = hyva.formatPrice(
                                                    parseFloat(this.total_qty_tile) *
                                                    (parseFloat(this.final_price)*
                                                        parseFloat(this.sqft_per_tile)).toFixed(2)
                                                    );
                this.total_regular_price = hyva.formatPrice(
                                                            parseFloat(this.total_qty_tile) *
                                                            (parseFloat(this.regular_price)*
                                                            parseFloat(this.sqft_per_tile)).toFixed(2)
                                                            );
                <?php if ($product->getAttributeText('product_floor_type') == 'Tier Pricing') {?>          
                
                <?php }?>
                
                
                
            },
            addToCartClickVerify:   function () {
				var custompice =  document.getElementById("pdp-price").innerHTML;	
				custompice = custompice.replace('$','');						
				document.getElementById('pdp-p-data').value = custompice;
				
                window.dispatchEvent(new CustomEvent('amcart-loading-start'));
                this.isLoading = true;
                
                var add_to_cart_param = [];
                <?php
                foreach ($cbcTilesArr as $cbcTile) {
                    if (in_array($cbcTile['cbc_type'], ['corner','border','center'])) {
                        ?>
        add_to_cart_param.push(
        '<?= /* @noEscape */ $cbcTile['cbc_type'] ?>_product_id=<?= /* @noEscape */ $cbcTile['cbc_product_id'] ?>'
        );
        add_to_cart_param.push('<?= /* @noEscape */ $cbcTile['cbc_type'] ?>_tiles_qty='+
        this.<?= /* @noEscape */ $cbcTile['cbc_type'] ?>_tiles);
                <?php
                    }
                }
                ?>
                var pricePerSqft = this.final_price; 
                var shopBy  = this.rubberTilesTab ?? 'shop_by_quantity';
                var CBCTileSize = this.tile_size_area_text ?? ' ';
                var selected_option_child_id = document.querySelector('input[name="selected_option_child_id"]').value; 
				window.dispatchEvent(new CustomEvent('amcart-loading-start'));
                fetch(BASE_URL+'flooring/index/cartpost?form_key=' + hyva.getFormKey(), {
                    method: "POST",
                    headers: { "content-type": "application/x-www-form-urlencoded; charset=UTF-8" },
                    body: "main_product_id=<?= /* @noEscape */ $product->getId() ?>
                    &product_floor_type=CBC Tiles&selected_option_child_id="+selected_option_child_id+
                    "&price_per_tile="+this.final_price_per_tile+"&custom_price="+this.final_price_per_tile+"&CBCShopBy="+shopBy+"&CBCTileSize="+CBCTileSize+"&pricePerSqft="+pricePerSqft+"&"+add_to_cart_param.join("&"),
                })
                .then(response => {
                    window.dispatchEvent(new CustomEvent('reload-customer-section-data')); 
                    if (document.querySelector('.related-product-dialog-wrapper')) {
                        window.dispatchEvent(
                            new CustomEvent('hyva-modal-show', {detail: {dialog: 'related-product-slider-dialog'}})
                        ); 
                    }
                })
                .then(data => {
                    window.dispatchEvent(new CustomEvent('reload-customer-section-data'));
                    window.dispatchEvent(new CustomEvent('amcart-loading-stop'));
                });
            },
            decimalFeetToFeetInches: function(measurement){
                let feetInchesObj = {};
                let feet = parseInt(measurement);
                let fraction = parseFloat(measurement) - parseInt(feet);
                let inches = parseInt(12.0 * parseFloat(fraction));
                feetInchesObj['feet'] = feet;
                feetInchesObj['inches'] = inches;
                return feetInchesObj;
            }
        }
    } 
    </script>
    <?php if ($product->getAttributeText('product_floor_type') == 'Tier Pricing'):?>
        <input type="hidden" id='min_tile_quantity' value='125' />  
    <?php endif;?> 
    <div class="all_total_calc_section">
        <div class="rubber_tiles_tab_wrapper bg-white w-full" x-show="sqft_per_tile > 0 && sqft_per_tile !=''">
            <!-- The tabs navigation -->
            <div class="roll_length_tab_heading flex items-center">
            <a class="w-1/2" :class="{ 'active': rubberTilesTab === 'shop_by_room_size' }"
                @click.prevent="rubberTilesTab = 'shop_by_room_size'; roomWidthKeyup(); roomLengthKeyup();" href="#">
                Shop by Room Size
            </a>
            <a class="w-1/2" :class="{ 'active': rubberTilesTab === 'shop_by_quantity_tab' }"
                @click.prevent="rubberTilesTab = 'shop_by_quantity_tab';" href="#">Shop by Quantity</a>
            </div>
            <div  class="rubber_tiles_tab_content tab1" x-show="rubberTilesTab === 'shop_by_room_size'">
                
                <div class="room-size-input flex items-center text-center justify-center w-full">
                    <div class="field room_width">
                        <label class="label text-size14 font-medium text-black" for="room_width">
                            <span class="text-size14 font-medium text-black">Room Width (ft)</span>
                        </label>
                        <input name="room_width" id="room_width" value="" type="text" placeholder="0"
                        x-model="room_width" x-on:keyup="roomWidthKeyup"
                        autocomplete="off" class="form-text  text-size14 font-normal text-black" />
                    </div>
                    <span class="cross-mark text-size14 font-normal text-black">×</span>
                    <div class="field room_length">
                        <label class="label text-size14 font-medium text-black" for="room_length">
                            <span class="text-size14 font-medium text-black">Room Length (ft)</span>
                        </label>
                        <input name="room_length" id="room_length" value="" type="text" placeholder="0"
                        x-model="room_length" x-on:keyup="roomLengthKeyup"
                        autocomplete="off" class="form-text text-size14 font-normal text-black" />
                    </div>
                </div>

                <div class="room-options-container flex items-center text-center justify-between"
                x-show="room_width > 0 && room_length > 0">
                    <div class="room-option-container1">
                        <input id="room-option1" type="radio" name="room_size_option_group"
                        x-on:change="updateCbcTilesQty()" x-model="room_size_option_group" value="1" class="hidden" />
                        <label class="room-option1 w-full" for="room-option1">
                            <span class="text-size14 font-semibold text-black">Option 1</span>
                            <div class="option1_floor_width_info text-size14 font-normal text-black">
                                <span x-text="floor_width_display_ft_inch1['feet']"></span>'
                                <span x-text="floor_width_display_ft_inch1['inches']"></span>"
                                x
                                <span x-text="floor_length_display_ft_inch1['feet']"></span>'
                                <span x-text="floor_length_display_ft_inch1['inches']"></span>"
                            </div>
                            <div class="option1_cbc_tiles_info">
                                <div>Corner Tiles: <span x-text="room_corner_tiles1"></span></div>
                                <div>Border Tiles: <span x-text="room_border_tiles1"></span></div>
                                <div>Center Tiles: <span x-text="room_center_tiles1"></span></div>
                            </div>
                            
                        </label>
                    </div>

                    <div class="room-option-container2">
                        <input id="room-option2" type="radio" name="room_size_option_group"
                        x-on:change="updateCbcTilesQty()" x-model="room_size_option_group" value="2" class="hidden" />
                        <label class="room-option2 w-full" for="room-option2">
                            <span class="text-size14 font-semibold text-black">Option 2</span>
                            <div class="option1_floor_width_info text-size14 font-normal text-black">
                                <span x-text="floor_width_display_ft_inch2['feet']"></span>'
                                <span x-text="floor_width_display_ft_inch2['inches']"></span>"
                                x
                                <span x-text="floor_length_display_ft_inch2['feet']"></span>'
                                <span x-text="floor_length_display_ft_inch2['inches']"></span>"
                            </div>
                            <div class="option1_cbc_tiles_info">
                                <div>Corner Tiles: <span x-text="room_corner_tiles2"></span></div>
                                <div>Border Tiles: <span x-text="room_border_tiles2"></span></div>
                                <div>Center Tiles: <span x-text="room_center_tiles2"></span></div>
                            </div>
                            
                        </label>
                    </div>
                    
                </div>


            </div>
            <div  class="rubber_tiles_tab_content tab2" x-show="rubberTilesTab === 'shop_by_quantity_tab'">
                <div class="rubber_tiles-sqft-info text-size14 font-normal text-lightgray1 mb-4">
                    Each tile covers <span x-text="exact_width"></span>" x <span x-text="exact_length"></span>" 
                    (<span x-text="sqft_per_tile"></span> sqft)
                </div>
                <?php
                foreach ($cbcTilesArr as $cbcTile) {
                    if (in_array($cbcTile['cbc_type'], ['corner','border','center'])) {
                        ?>
                        <div class="cutom_roll">
                            <div class="field corner_tiles w-full flex items-center">
                                <label class="label text-size14 font-medium text-black" for="corner_tiles">
                                    <span><?= /* @noEscape */ $cbcTile['cbc_type'] ?> Tiles:</span>
                                </label>
                                <input name="<?= /* @noEscape */ $cbcTile['cbc_type'] ?>_tiles" 
                                id="<?= /* @noEscape */ $cbcTile['cbc_type'] ?>_tiles"
                                class="form-text text-size14 font-medium text-black"
                                value="" type="text" x-model="<?= /* @noEscape */ $cbcTile['cbc_type'] ?>_tiles" 
                                x-on:change="<?= /* @noEscape */ $cbcTile['cbc_type'] ?>TilesUpdate"/>
                            </div>
                        </div>
                <?php
                    }
                }
                ?>
            </div>
        </div>

        <div class="quantity-container mb-6 flex items-center">
            <div class="unit_equals_sqft text-size14 font-normal text-black pl-6 ml-2" 
            x-show="showPriceSummary == 1 && tile_size_area_text">
                <span x-text="tile_size_area_text" ></span>
            </div>
        </div>
        <div class="price-summary-container flex justify-between bg-white rounded-md relative"
             x-show="showPriceSummary == 1 && (sqft_per_tile > 0 && sqft_per_tile !='')">
            <div class="left">
                <div class="total-case">
                    <span x-text="total_qty_tile" class="inter text-size28 font-medium text-black mr-1"></span>
                    <span class="inter text-size16 font-normal text-black">tiles</span>
                </div>
                <div class="total-coverageSqft hidden">Covers <span x-text="total_coverage_sqft"></span> sqft</div>
                <?php if (!empty($product->getOveragePercent())) {?>
                    <div class="overage_percent_sec flex items-center mt-5">
                        <input type="checkbox" id="overage_percent" name="overage_percent"
                               x-model="is_check_overage_percent" x-on:change="overagePercent" value=""/>
                        <label for="overage_percent" class="inter text-size14 font-normal text-black">
                            Include extra <?= /* @noEscape */ $product->getOveragePercent()?>%
                            <img src="<?= /* @noEscape */ $block->getViewFileUrl('images/mark1.png'); ?>"
                                alt="mark1" width="15" height="15" class="ml-1 inline-block align-text-top">
                        </label>
                    </div>
                <?php } ?>
            </div>
            <div class="right your_price flex">
                <div class="inter text-size16 font-medium text-black price_left">Your price</div>
                <div class="total-price-info ml-6">
                    <div class="total-regular-price inter line-through text-size14 font-normal text-custom-blue"
                     x-show="total_price!=total_regular_price" x-text="total_regular_price"></div>
                    <div class="total-price inter text-size21 font-bold text-custom-blue" x-text="total_price" id ="pdp-price"></div>
                </div>
            </div>
        </div>
    </div>
<?php endif; ?>
