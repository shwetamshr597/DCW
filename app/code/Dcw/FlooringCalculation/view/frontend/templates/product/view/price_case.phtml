<?php
/**
 * Hyv� Themes - https://hyva.io
 * Copyright � Hyv� Themes 2020-present. All rights reserved.
 * This product is licensed per Magento install
 * See https://hyva.io/license
 */

declare(strict_types=1);

use Hyva\Theme\Model\ViewModelRegistry;
use Hyva\Theme\ViewModel\ProductPage;
use Hyva\Theme\ViewModel\ProductPrice;
use Magento\Catalog\Block\Product\AbstractProduct;
use Magento\Catalog\Model\Product;
use Magento\Catalog\Pricing\Price\FinalPrice;
use Magento\Catalog\Pricing\Price\RegularPrice;
use Magento\Catalog\Pricing\Price\TierPrice;
use Magento\Framework\Escaper;

/** @var AbstractProduct $block */
/** @var Escaper $escaper */
/** @var ViewModelRegistry $viewModels */
/** @var Product $product */
$product = $block->getProduct();

/** @var ProductPrice $productPriceViewModel */
$productPriceViewModel = $viewModels->require(ProductPrice::class);

/** @var ProductPage $productViewModel */
$productViewModel = $viewModels->require(ProductPage::class);

$regularPrice = $productPriceViewModel->getPriceValue(RegularPrice::PRICE_CODE, $product);
$finalPrice = $productPriceViewModel->getPriceValue(FinalPrice::PRICE_CODE, $product);
$tierPrices = $productPriceViewModel->getTierPrices(TierPrice::PRICE_CODE, $product);

$save_msrp_price = $regularPrice - $finalPrice;
$percentage_discount = round((float)number_format(($save_msrp_price*100)/$regularPrice, 2, ".", ""));

$flooringCalculationBlock = $block->getLayout()->createBlock(\Dcw\FlooringCalculation\Block\Index::class);
$flooringCalculationHelper = $flooringCalculationBlock->flooringCalculationHelper();

$tiles_size_attribute_id =  $flooringCalculationBlock->attributeResourceModel()
->getIdByCode('catalog_product', 'product_option');

if ($productPriceViewModel->displayPriceInclAndExclTax()) {
    $regularPriceExclTax = $productPriceViewModel->getPriceValueExclTax(RegularPrice::PRICE_CODE, $product);
    $finalPriceExclTax = $productPriceViewModel->getPriceValueExclTax(FinalPrice::PRICE_CODE, $product);
}

$displayTax = $productPriceViewModel->displayPriceIncludingTax();

?>
<script>
    function initPrice<?= (int)$product->getId() ?>() {

        <?php /* All four of these keys are used - they are rendered by PHP */ ?>
        const regularPriceInclTaxKey = 'oldPrice',
              regularPriceExclTaxKey = 'baseOldPrice',
              finalPriceInclTaxKey = 'finalPrice',
              finalPriceExclTaxKey = 'basePrice';

        function calculateCustomOptionPrices(activeCustomOptions, customOptionPrices) {
            return activeCustomOptions.reduce((priceAccumulator, activeCustomOptionId) => {
                const customOptionPrice = customOptionPrices[activeCustomOptionId];
                if (customOptionPrice) {
                    return Number.parseFloat(priceAccumulator) + Number.parseFloat(customOptionPrice);
                }
                return priceAccumulator;
            }, 0);
        }

        return {
            regularPriceKey: <?= $displayTax ? 'regularPriceInclTaxKey' : 'regularPriceExclTaxKey' ?>,
            finalPriceKey: <?= $displayTax ? 'finalPriceInclTaxKey' : 'finalPriceExclTaxKey' ?>,
            activeProductsPriceData: false,
            initialFinalPrice: <?= (float)$finalPrice ?>,
            calculatedFinalPrice: false,
            calculatedFinalPriceWithCustomOptions: false,
            initialTierPrices: <?= /** @noEscape */ json_encode($tierPrices) ?>,
            showRegularPriceLabel: <?= ($finalPrice < $regularPrice) ? 'true' : 'false' ?>,
            customOptionPrices: [],
            <?php if ($productPriceViewModel->displayPriceInclAndExclTax()): ?>
            initialBasePrice: <?= (float)$finalPriceExclTax ?>,
            calculatedBasePrice: false,
            customOptionBasePrices: [],
            calculatedBasePriceWithCustomOptions: false,
            <?php endif; ?>
            activeCustomOptions: [],
            qty: 1,
            getFinalPricePerCase:'<?= /* @noEscape */ strip_tags($productViewModel->
                                                                format($product->getCoveragePerCase()*$finalPrice)) ?>',
            getPercentageDiscount:'<?= /* @noEscape */ $percentage_discount ?>',
            getSaveMsrpPrice:'<?= /* @noEscape */ strip_tags($productViewModel->format($save_msrp_price));?>',
            pdp_shipping_text: '<?= /* @noEscape */ $product->getPdpShippingText()?>',
            expected_days_ship: '<?= /* @noEscape */ $flooringCalculationHelper
            ->getExpectedShipDate($product->getId());?>',
            updateCustomOptionActive(data) {
                let activeCustomOptions = this.activeCustomOptions;
                const customOptionId = data.customOptionId;

                if (data.active) {
                    if (!activeCustomOptions.includes(customOptionId)) {
                        activeCustomOptions.push(data.customOptionId);
                    }
                } else {
                    if (customOptionId && activeCustomOptions.includes(customOptionId)) {
                        let index = activeCustomOptions.indexOf(customOptionId);
                        activeCustomOptions.splice(index, 1);
                    }
                }
                this.calculateFinalPriceWithCustomOptions()
            },
            updateCustomOptionPrices(prices, basePrices) {
                if (prices) {
                    this.customOptionPrices = prices;
                }

                <?php if ($productPriceViewModel->displayPriceInclAndExclTax()): ?>
                if (basePrices) {
                    this.customOptionBasePrices = basePrices;
                }
                <?php endif; ?>

                this.calculateFinalPriceWithCustomOptions();
            },
            calculateFinalPrice() {

                const findApplicableTierPrice = (initialPrice, withTax) => {
                    if (this.activeProductsPriceData && this.activeProductsPriceData.tierPrices) {
                        const key = withTax ? 'price' : 'basePrice'
                        return this.activeProductsPriceData.tierPrices.reduce((acc, tierPrice) => {
                            if (this.qty >= tierPrice.qty && tierPrice[key] < acc) {
                                return tierPrice[key];
                            }
                            return acc;
                        }, this.activeProductsPriceData[withTax ? finalPriceInclTaxKey : finalPriceExclTaxKey].amount);

                    } else {
                        const key = withTax ? 'price_incl_tax' : 'price_excl_tax';
                        return Object.values(this.initialTierPrices).reduce((acc, tierPrice) => {
                            if (this.qty >= tierPrice.price_qty && tierPrice[key] < acc) {
                                return tierPrice[key];
                            }
                            return acc;
                        }, initialPrice);

                    }
                }

                this.calculatedFinalPrice = findApplicableTierPrice(
                                            this.initialFinalPrice,
                                            <?= /* @noEscape */ $displayTax ? 'true' : 'false' ?>
                                            );
                window.dispatchEvent(new CustomEvent("update-product-final-price",
                                                     {detail: this.calculatedFinalPrice}
                                                     ));

                <?php if ($productPriceViewModel->displayPriceInclAndExclTax()): ?>
                this.calculatedBasePrice = findApplicableTierPrice(<?= (float) $finalPriceExclTax ?>, false);
                window.dispatchEvent(new CustomEvent("update-product-base-price",
                                                     {detail: {basePrice: this.calculatedBasePrice}}
                                                     ));
                <?php endif; ?>
                
                
            },
            calculatePriceLabelVisibility() {
                this.showRegularPriceLabel =
                    (this.calculatedFinalPrice === this.activeProductsPriceData[this.regularPriceKey].amount) &&
                    this.activeProductsPriceData.isMinimalPrice;
            },
            calculateFinalPriceWithCustomOptions() {
                const finalPrice = this.calculatedFinalPrice || this.initialFinalPrice;
                this.calculatedFinalPriceWithCustomOptions = finalPrice + this.getCustomOptionPrice();
                <?php if ($productPriceViewModel->displayPriceInclAndExclTax()): ?>
                const basePrice = this.calculatedBasePrice || this.initialBasePrice;
                this.calculatedBasePriceWithCustomOptions = basePrice + this.getCustomOptionBasePrice();
                <?php endif; ?>
            },
            getCustomOptionPrice() {
                return calculateCustomOptionPrices(this.activeCustomOptions, this.customOptionPrices);
            },
            <?php if ($productPriceViewModel->displayPriceInclAndExclTax()): ?>
            getCustomOptionBasePrice() {
                return calculateCustomOptionPrices(this.activeCustomOptions, this.customOptionBasePrices);
            },
            <?php endif; ?>
            getFinalPrice() {
                var final_price = this.calculatedFinalPriceWithCustomOptions ||
                this.calculatedFinalPrice ||
                this.initialFinalPrice;
                
                this.final_price = final_price;
                return (final_price);
            },
            getFormattedFinalPrice() {
                return hyva.formatPrice(this.getFinalPrice())
            },
            getRegularPrice() {
                var regular_price = '<?= /* @noEscape */ $regularPrice;?>';
                if (this.activeProductsPriceData){
                   regular_price =   this.activeProductsPriceData[this.regularPriceKey].amount;
                   this.regular_price = regular_price;
                }
                return regular_price;
            },
            getFormattedRegularPrice() {
                return hyva.formatPrice(this.getRegularPrice())
            },
            getFinalPricePerCase() {
                var final_price_per_case = parseFloat(this.coverage_per_case)*parseFloat(this.getFinalPrice());
                return hyva.formatPrice(final_price_per_case);
            },
            getSaveMsrpPrice() {
                var save_msrp_price = parseFloat(this.getRegularPrice()) - parseFloat(this.getFinalPrice());
                return save_msrp_price;
            },
            getFormattedSaveMsrpPrice() {
                return hyva.formatPrice(this.getSaveMsrpPrice());
            },
            getPercentageDiscount() {
                var percentage_discount = Math.round((
                                                      parseFloat(this.getSaveMsrpPrice()*100)/
                                                      parseFloat(this.getRegularPrice())).toFixed(2));
                return percentage_discount;
            },
            <?php if ($productPriceViewModel->displayPriceInclAndExclTax()): ?>
            getFormattedBasePrice() {
                return hyva.formatPrice(
                    this.calculatedBasePriceWithCustomOptions ||
                    this.calculatedBasePrice ||
                    this.initialBasePrice
                )
            },
            <?php endif; ?>
            isPriceHidden() {
                const finalPrice = this.calculatedFinalPriceWithCustomOptions ||
                    this.calculatedFinalPrice ||
                    this.initialFinalPrice;
                return <?= $product->isSaleable() ? 'false' : 'true' ?> && finalPrice === 0;
            },
            updateConfigurableChanged(data){
            //--- on color/size click price change in size box   START------------------
            //alert(this.optionConfig.attributes[data.optionId]['code']);
            if (this.optionConfig.attributes[data.optionId]['code'] != 'product_option' &&
                this.optionConfig.attributes[<?= /* @noEscape */ $tiles_size_attribute_id?>]) {
                var attributes_options = this.optionConfig.attributes[data.optionId]['options'];
                //console.log(JSON.stringify(attributes_options));
                attributes_options.forEach(function(option_details) {
                    if(option_details['id'] == data.value){
                        option_details['products'].forEach(function(child_product_id) {
                            var tiles_size_attr_value =
                            initConfigurableSwatchOptions_<?= /* @noEscape */ (int)$product->getId() ?>().optionConfig.
                            index[child_product_id][<?= /* @noEscape */ $tiles_size_attribute_id?>];
                            
                            var get_coverage_per_case =
                            initConfigurableSwatchOptions_<?= /* @noEscape */ (int)$product->getId() ?>().
                            optionConfig.coverage_per_case[child_product_id];

                            var finalPrice_amount =
                            initConfigurableSwatchOptions_<?= /* @noEscape */ (int)$product->getId() ?>().optionConfig.
                            optionPrices[child_product_id]['finalPrice']['amount'];
                        
                            var CONTROL_INTERVAL = setInterval(function(){
                            if(document.getElementById(
                            "swatch-tiles-size-price-pertile-<?= /* @noEscape */ $tiles_size_attribute_id?>-"+
                            tiles_size_attr_value)){
                                if (get_coverage_per_case > 0 && get_coverage_per_case !="") {
                                    document.getElementById(
                                    "swatch-label-box-<?= /* @noEscape */ $tiles_size_attribute_id?>-"
                                    +tiles_size_attr_value
                                    ).classList.remove("opacity-50");
                                    document.getElementById(
                                    "swatch-label-box-<?= /* @noEscape */ $tiles_size_attribute_id?>-"
                                    +tiles_size_attr_value
                                    ).classList.remove("select-none");

                                    document.getElementById(
                                    "swatch-tiles-size-price-<?= /* @noEscape */ $tiles_size_attribute_id?>-"
                                    +tiles_size_attr_value
                                    ).innerHTML =
                                    '('+hyva.formatPrice(finalPrice_amount)+'/sqft)';
                                    document.getElementById(
                                    "swatch-tiles-size-price-pertile-<?= /* @noEscape */ $tiles_size_attribute_id?>-"
                                    +tiles_size_attr_value
                                    ).innerHTML =
                                    hyva.formatPrice(parseFloat(get_coverage_per_case)*parseFloat(finalPrice_amount));
                                   
                                } else {
                                    /* ----------- tiles size box inactive & price hide START ------------ */
                                    document.getElementById(
                                    "swatch-label-box-<?= /* @noEscape */ $tiles_size_attribute_id?>-"
                                    +tiles_size_attr_value
                                    ).classList.add("opacity-50");
                                    document.getElementById(
                                    "swatch-label-box-<?= /* @noEscape */ $tiles_size_attribute_id?>-"
                                    +tiles_size_attr_value
                                    ).classList.add("select-none");

                                    document.getElementById(
                                    "swatch-tiles-size-price-<?= /* @noEscape */ $tiles_size_attribute_id?>-"
                                    +tiles_size_attr_value
                                    ).innerHTML = '';
                                    document.getElementById(
                                    "swatch-tiles-size-price-pertile-<?= /* @noEscape */ $tiles_size_attribute_id?>-"
                                    +tiles_size_attr_value
                                    ).innerHTML = '';

                                    /* ----------- tiles size box inactive & price hide END ------------ */
                                }
                                clearInterval(CONTROL_INTERVAL);
                            }
                            }, 100);
                        });
                    }
                });
            }
            //--- on color/size click price change in size box   END------------------
        },
            eventListeners: {
                ['@update-tile-size-area-<?= (int)$product->getId() ?>.window'](event) {
                    this.tile_size_area_text = event.detail.tile_size_area_text;
                },
                ['@update-coverage-per-case-<?= (int)$product->getId() ?>.window'](event) {
                    this.coverage_per_case = (event.detail)?event.detail:
                        '<?= /* @noEscape */ $product->getCoveragePerCase()?>';
                },
                ['@update-shipping-details-<?= (int)$product->getId() ?>.window'](event) {
                    this.pdp_shipping_text = (event.detail.pdp_shipping_text)?event.detail.pdp_shipping_text:
                    '<?= /* @noEscape */ $product->getPdpShippingText()?>';
                    this.expected_days_ship = (event.detail.expected_days_ship)?event.detail.expected_days_ship:
                    '<?= /* @noEscape */ $flooringCalculationHelper
                    ->getExpectedShipDate($product->getId());?>';
                },
                ['@update-prices-<?= (int)$product->getId() ?>.window'](event) {
                    this.activeProductsPriceData = event.detail;

                    this.calculateFinalPrice();
                    this.calculateFinalPriceWithCustomOptions();
                    this.calculatePriceLabelVisibility();

                    /* --- add to cart button enabled / disabled based on coverage_per_case checking START ---- */
                    if(this.coverage_per_case > 0 && this.coverage_per_case !=""){
                        document.querySelector('#product-addtocart-button-fake').disabled = false;
                    }else{
                        document.querySelector('#product-addtocart-button-fake').disabled = true;
                    }
                    /* ---- add to cart button enabled / disabled based on coverage_per_case checking END ------ */
                    
                    //--- on color click  total info change    START------------------
                    if ( this.square_footage > 0 && this.square_footage != '') {
                        var qty_calc = 1;
                        var total_square_footage = parseFloat(this.square_footage);
                        if(this.is_check_overage_percent){
                            var extra_square_footage_overage = (parseFloat(this.square_footage)*
                                                            parseFloat(this.overage_percent))/100;

                            total_square_footage = parseFloat(this.square_footage) +
                                                    parseFloat(extra_square_footage_overage);
                        }
                        qty_calc = parseFloat(total_square_footage)/parseFloat(this.coverage_per_case);
                        qty_calc = Math.ceil(qty_calc);
                        this.total_qty = qty_calc;
                        this.total_qty_case = qty_calc;
                    }
                    this.total_coverage_sqft = (parseFloat(this.coverage_per_case) * 
                    parseFloat(this.total_qty)).toFixed(2);
                    this.total_price = hyva.formatPrice(
                                                        parseFloat(this.total_qty) *
                                                        (parseFloat(this.getFinalPrice())*
                                                        parseFloat(this.coverage_per_case)).toFixed(2)
                                                        );
                    this.total_regular_price = hyva.formatPrice(
                                                            parseFloat(this.total_qty) *
                                                            (parseFloat(this.getRegularPrice())*
                                                            parseFloat(this.coverage_per_case)).toFixed(2)
                                                        );
                   
                //--- on color click  total info change    END------------------
                
                this.showPriceSummary = 1; // show Price Summary
                },
                ['@update-qty-<?= (int)$product->getId() ?>.window'](event) {
                    this.qty = event.detail;
                    this.calculateFinalPrice();
                    this.calculateFinalPriceWithCustomOptions();
                },
                ['@update-custom-option-active.window'](event) {
                    this.updateCustomOptionActive(event.detail);
                },
                ['@update-custom-option-prices.window'](event) {
                    this.updateCustomOptionPrices(event.detail);
                },
                ['@configurable-selection-changed.window'](event) {
                    this.updateConfigurableChanged(event.detail);
                },
                <?php if ($productPriceViewModel->displayPriceInclAndExclTax()): ?>
                ['@update-custom-option-base-prices.window'](event) {
                    this.updateCustomOptionPrices(null, event.detail);
                }
                <?php endif; ?>
            }
        }
    }
</script>
<div x-data="initPrice<?= (int)$product->getId() ?>()"
     x-bind="eventListeners"
     class="price-box price-final_price price__box mb-2"
>
    <div class="sale_price_info w-1/2 bg-transparent py-2 pl-5 pr-5">
        <h3 class="text-size14 font-medium text-darkblack mb-1">Our Sale Price</h3>
        <template x-if="!activeProductsPriceData && !isPriceHidden()">
            <div class="price-container flex items-baseline">
                <div class="final-price inline-block" itemprop="offers" itemscope="" itemtype="http://schema.org/Offer">
                        <?php /*<span class="price-label block">
                            <?= ($product->canConfigure() && is_int($product->getPrice())) ?
                                $escaper->escapeHtml(__('As low as')) . ':' :
                                '&nbsp;' ?>
                        </span> */?>
                    <span id="product-price-<?= (int)$product->getId() ?>"
                          class="price-wrapper">
                        <span class="price inter text-size21 font-bold text-darkblack"
                            x-html="getFormattedFinalPrice()">
                            <?= /** @noEscape */ $productViewModel->format($finalPrice) ?>
                        </span> <span class="price-label inter text-size14 font-normal text-darkblack mr-2">/sqft</span>
                    </span>
                    <meta itemprop="price" content="<?= $escaper->escapeHtmlAttr($finalPrice) ?>">
                    <meta itemprop="priceCurrency"
                          content="<?= $escaper->escapeHtmlAttr($productViewModel->getCurrencyData()['code']) ?>">
                </div>
                <?php if ($productPriceViewModel->displayPriceInclAndExclTax()): ?>
                    <div class="final-price-excl-tax">
                        <span>
                            <span><?= $escaper->escapeHtml(__('Excl. Tax')) ?>:</span>
                            <span class="price inter text-size21 font-bold text-darkblack"
                                x-html="getFormattedBasePrice()">
                                <?= /** @noEscape */ $productViewModel->format($finalPriceExclTax) ?>
                            </span>
                        </span>
                    </div>
                <?php endif; ?>
                <?php if ($finalPrice < $regularPrice): ?>
                    <div class="old-price mr-2 flex">
                        <span id="product-price-<?= (int)$product->getId() ?>"
                              class="price-wrapper">
                            <span class="price line-through inter text-size14 font-normal text-darkblack"
                                x-html="hyva.formatPrice(<?= (float)$regularPrice ?> + getCustomOptionPrice())">
                                <?= /** @noEscape */ $productViewModel->format($regularPrice) ?>
                            </span>
                        </span>
                    </div>
                    <?php if ($productPriceViewModel->displayPriceInclAndExclTax()): ?>
                    <div class="old-price-excl-tax">
                        <span>
                            <span><?= $escaper->escapeHtml(__('Excl. Tax')) ?>:</span>
                            <span class="price line-through inter text-size14 font-normal text-darkblack"
                                x-html="hyva.formatPrice(<?= (float)$regularPriceExclTax ?> +
                                getCustomOptionBasePrice())">
                                <?= /** @noEscape */ $productViewModel->format($regularPriceExclTax) ?>
                            </span>
                        </span>
                    </div>
                    <?php endif; ?>
                <?php endif; ?>
            </div>
        </template>
        <template x-if="activeProductsPriceData">
            <div class="price-container flex items-baseline">
                <div class="final-price inline-block">
                    <?php /*if ($product->canConfigure() && is_int($product->getPrice())): ?>
                        <span class="price-label block" :class="{ 'invisible' : !showRegularPriceLabel }">
                            <?= $escaper->escapeHtml(__('As low as')) ?>:
                        </span>
                    <?php endif;*/ ?>
                    <span id="product-price-<?= (int)$product->getId() ?>"
                          class="price-wrapper">
                        <span class="price inter text-size21 font-bold text-darkblack"
                            x-html="getFormattedFinalPrice()"></span>
                        <span class="price-label inter text-size14 font-normal text-darkblack mr-2">/sqft</span>
                    </span>
                </div>
        
                <template x-if="activeProductsPriceData &&
                    activeProductsPriceData.oldPrice &&
                    activeProductsPriceData[finalPriceKey].amount < activeProductsPriceData[regularPriceKey].amount
                ">
                    <div class="old-price flex mr-2">
                        <span id="product-price-<?= (int)$product->getId() ?>"
                              class="price-wrapper title-font font-regular text-xl line-through text-gray-900">
                            <span class="price" x-html="
                            hyva.formatPrice(activeProductsPriceData[regularPriceKey].amount +
                            getCustomOptionPrice())"></span>
                        </span>
                    </div>
                </template>
            </div>
        </template>
        <?php if ($productPriceViewModel->displayPriceInclAndExclTax()): ?>
        <template x-if="activeProductsPriceData &&
            activeProductsPriceData.oldPrice &&
            activeProductsPriceData[finalPriceKey].amount < activeProductsPriceData[regularPriceKey].amount
        ">
            <div class="old-price-excl-tax">
                <span><?= $escaper->escapeHtml(__('Excl. Tax')) ?>:</span>
                <span class="font-regular text-gray-900">
                    <span class="price"
                    x-html="hyva.formatPrice(activeProductsPriceData['baseOldPrice'].amount +
                    getCustomOptionBasePrice())">
                    </span>
                </span>
            </div>
        </template>
        <template x-if="activeProductsPriceData">
            <div class="price-excl-taxinline-block">
                <span><?= $escaper->escapeHtml(__('Excl. Tax')) ?>:</span>
                <span class="font-regular text-gray-900">
                    <span class="price" x-html="getFormattedBasePrice()"></span>
                </span>
            </div>
        </template>
        <?php endif; ?>
        <div class="price_per_case mt-4 inter text-size13 font-medium text-darkblack"  
        x-show="showPriceSummary == 1 && (coverage_per_case > 0 && coverage_per_case !='')">
            <span x-text="getFinalPricePerCase"></span>/case
        </div>
        <div class="coverage_per_case inter text-size13 font-medium text-darkblack" 
        x-show="coverage_per_case > 0 && coverage_per_case !=''">
            Covers <span x-text="coverage_per_case"></span> sqft
        </div>
    </div>
    <?= /* @noEscape */ $block->getLayout()->createBlock(Magento\Catalog\Block\Product\View::class)
    ->setTemplate('Dcw_FlooringCalculation::product/view/price_ship_info_right.phtml')->toHtml();?>
</div>
